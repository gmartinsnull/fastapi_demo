name: Deploy FastAPI to EC2

on:
  push:
    branches:
      - main

jobs:
  provision:
    name: Provision EC2
    runs-on: ubuntu-latest
    outputs:
      ec2_public_ip: ${{ steps.parse_ip.outputs.ec2_public_ip }}
    steps:
    # Step 1: Checkout Repository
    - name: Checkout Repository
      uses: actions/checkout@v3

    # Step 2: Set Up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.10.3"

    # Step 3: Initialize and Apply Terraform
    - name: Terraform Init and Apply
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        terraform init
        terraform apply -auto-approve
        terraform output -json > tf_output.json

    # Step 4: Parse EC2 Public IP
    - name: Parse EC2 Public IP
      id: parse_ip
      run: |
        echo "ec2_public_ip=$(jq -r '.ec2_public_ip.value' tf_output.json)" >> $GITHUB_OUTPUT

  configure-ec2:
    name: Configure EC2
    runs-on: ubuntu-latest
    needs: provision
    steps:
      - name: Retry SSH connection until ready
        run: |
          for i in {1..5}; do
            echo "Checking SSH availability on ${{ needs.provision.outputs.ec2_public_ip }}..."
            if nc -z -w5 ${{ needs.provision.outputs.ec2_public_ip }} 22; then
              echo "SSH is ready!"
              break
            else
              echo "Waiting for SSH to become available... (attempt $i)"
              sleep 30
            fi
          done
  
  # Step 5: Configure Nginx as a Reverse Proxy
  install-nginx:
    name: Install Nginx
    runs-on: ubuntu-latest
    needs: configure-ec2
    steps:
      - name: Configure Nginx for Reverse Proxy
        uses: appleboy/ssh-action@v0.1.6
        env:
          PUBLIC_IP: ${{ needs.provision.outputs.ec2_public_ip }}
        with:
          host: ${{ needs.provision.outputs.ec2_public_ip }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # Install Nginx
            sudo yum install nginx -y
            
            # Start and enable Nginx service
            sudo systemctl start nginx
            sudo systemctl enable nginx
            
            # Configure Nginx
            sudo mkdir -p /etc/nginx/conf.d/ && sudo bash -c "cat > /etc/nginx/conf.d/fastapi-demo.conf" <<EOF
            server {
                listen 80;
                server_name ${PUBLIC_IP};

                location / {
                    proxy_pass http://localhost:8000;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                }
            }
            EOF

            # Test Nginx configuration
            sudo nginx -t
            
            # Reload Nginx to apply changes
            sudo systemctl reload nginx

  # Step 6: Install Git and Docker on EC2 
  install-docker:
    name: Install Docker
    runs-on: ubuntu-latest
    needs: install-nginx
    steps:
      - name: SSH and Install Docker and Git
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ needs.provision.outputs.ec2_public_ip }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            sudo yum update -y
            sudo yum install -y git docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user

  # Step 7: Clone Repository and Build Docker Image
  build-run-app:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: install-docker
    steps:
      - name: Clone Repo and Run Docker
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ needs.provision.outputs.ec2_public_ip }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            cd ~/
            git clone https://github.com/gmartinsnull/fastapi_demo.git
            cd ~/fastapi_demo
            docker build -t fastapi_demo .
            docker run -d -p 8000:80 fastapi_demo